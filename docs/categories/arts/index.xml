<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🚀ARTS Challenge on Think Code Make Loop</title>
    <link>http://johnlofty.com/categories/arts/</link>
    <description>Recent content in 🚀ARTS Challenge on Think Code Make Loop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2021 johnlofty.com</copyright>
    <lastBuildDate>Mon, 22 Feb 2021 22:28:56 +0800</lastBuildDate>
    
	<atom:link href="http://johnlofty.com/categories/arts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ARTS Week02</title>
      <link>http://johnlofty.com/posts/arts-week02/</link>
      <pubDate>Mon, 06 Jul 2020 22:21:48 +0800</pubDate>
      
      <guid>http://johnlofty.com/posts/arts-week02/</guid>
      <description>Algorithm 第一题 实现指数运算，pow(x, n) 计算出x的n次方。
 Implement pow(x, n), which calculates x raised to the power n (x^n).
Note:
 -100.0 &amp;lt; x &amp;lt; 100.0 n is a 32-bit signed integer, within the range [-2^31, 2^31 - 1]   已知指数运算的几个特性：
1， 任意数的0次方为1；
2，1的n次方依然为1；
3，x为0时，若n为0，值为1；若n不为0，则值为0；
4，当n &amp;lt; 0 时， x^n = 1 / x^-n；
已知关于指数运算的知识点
 0的任意次方为0 1的任意次方为1 任意数的0次方1 如果n &amp;lt; 0, pow(x, n).= 1/pow(x, -n)  解法1，暴力破解
直接遍历n次即可得到，注意处理好边界条件。</description>
    </item>
    
    <item>
      <title>ARTS Week01</title>
      <link>http://johnlofty.com/posts/arts-week01/</link>
      <pubDate>Sat, 23 May 2020 11:43:03 +0800</pubDate>
      
      <guid>http://johnlofty.com/posts/arts-week01/</guid>
      <description>Algorithm  Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9,
Bacause nums[0] + num[1] = 2 + 7 =.9
return [0, 1].
 class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: key_map = {} for idx, num in enumerate(nums): if (target - num) in key_map: return [key_map[target-num], idx] key_map[num] = idx return [-1, -1]  Review learn about how Dict is implemented in Python.</description>
    </item>
    
  </channel>
</rss>